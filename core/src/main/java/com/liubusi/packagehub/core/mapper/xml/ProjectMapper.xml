<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liubusi.packagehub.core.mapper.ProjectMapper">

    <select id="listNextChildNode" resultType="com.liubusi.packagehub.common.pojo.vo.ProjectVO">
--         DROP PROCEDURE IF EXISTS listNextProjectChildNode;
--         create procedure listNextProjectChildNode(in proid bigint,in userid bigint)
--         BEGIN
--  	        declare role varchar(255);
--             select roles into role from user where id = userid;
--             if (userid = 0) then
--                 select * from project where parent_id = proid and pub_status = 1;
--             elseif (role = 'admin') then
--                 select * from project where parent_id = proid;
--             else
--                 select * from project where parent_id = proid and id in (select project_id from user_auth where user_id = userid);
--             end if;
--         END

        CALL listNextProjectChildNode(#{id},#{userId});
    </select>

    <select id="listParentNode" resultType="com.liubusi.packagehub.common.pojo.vo.ProjectVO">
        SELECT T1.level, T2.name
        FROM (
        SELECT
        @r AS _id,
        (SELECT @r := parent_id FROM project WHERE id = _id) AS parent_id,
        @l := @l + 1 AS level
        FROM
        (SELECT @r := #{id}, @l := 0) vars,
        project h
        WHERE @r &lt;&gt; 0) T1
        JOIN project T2
        ON T1._id = T2.id
        ORDER BY T1.level DESC
    </select>

    <select id="listAllChildNode" resultType="com.liubusi.packagehub.common.pojo.vo.ProjectVO">
        SELECT T2.level, T3.*
        FROM(
                SELECT @codes as _ids,
                       ( SELECT @codes := GROUP_CONCAT(id)
                         FROM project
                         WHERE FIND_IN_SET(parent_id, @codes)
                       ) as T1,
                       @l := @l+1 as level
                FROM project,
                     (SELECT @codes := #{id}, @l := -1 ) T4
                WHERE @codes IS NOT NULL
            ) T2, project T3
        WHERE FIND_IN_SET(T3.id, T2._ids)
          and id != #{id}
        ;
    </select>

    <insert id="saveFile">
        insert into project (`id`, `name`, `parent_id`, `type`, `url`)
        values (#{id}, #{name}, #{parentId},  #{type}, #{url})
    </insert>
    <insert id="saveCategory">
        INSERT INTO project (`id`, `name`, `parent_id`, `department`, `description`, `pub_status`) VALUES (
        #{id}, #{title}, #{parentId}, #{department}, #{description}, #{pubStatus})
    </insert>

    <delete id="remove">
        delete from project where id in (select id from (
            SELECT T3.id
            FROM(
                    SELECT @codes as _ids,
                           ( SELECT @codes := GROUP_CONCAT(id)
                             FROM project
                             WHERE FIND_IN_SET(parent_id, @codes)
                           ) as T1,
                           @l := @l+1 as level
                    FROM project,
                         (SELECT @codes := #{id}, @l := -1 ) T4
                    WHERE @codes IS NOT NULL
                ) T2, project T3
            WHERE FIND_IN_SET(T3.id, T2._ids)
        )id
        )
    </delete>

</mapper>
